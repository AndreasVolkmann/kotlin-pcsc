package = au.id.micolous.kotlin.pcsc.internal
noStringConversion = SCardListReaders

# To be able to use PCSC.framework, we need to pretend we're using Objective-C.
language.osx = Objective-C
modules.osx = PCSC
compilerOpts.osx = -framework PCSC
linkerOpts.osx = -framework PCSC

# Other platforms work nicer...
language.linux = C
depends.linux = posix
headers.linux = PCSC/wintypes.h PCSC/pcsclite.h PCSC/reader.h PCSC/winscard.h
compilerOpts.linux = -pthread -I/usr/include/PCSC -I/usr/include -I/usr/include/x86_64-linux-gnu
linkerOpts.linux = -L/usr/lib64 -L/usr/lib/x86_64-linux-gnu -lpcsclite
headerFilter.linux = PCSC/**

language.mingw = C
headers.mingw = winscard.h winsmcard.h
compilerOpts.mingw = -DUNICODE -DWINVER=0x0601 -D_WIN32_WINNT=0x0601 -DWINAPI_FAMILY=3
linkerOpts.mingw = -lWinSCard
headerFilter.mingw = winscard.h winsmcard.h

---

#if defined(__APPLE__)
// typedefs declared here don't show up. They are instead defined in:
// src/nativeMacosMain/kotlin/PlatformTypes.kt

#elif defined(__linux__)
// Return type for all SCard* functions
typedef LONG SCARDSTATUS;

#elif defined(_WIN32)
// Return type for all SCard* functions
typedef LONG SCARDSTATUS;

// Add in pcsclite-specific declarations
#define MAX_BUFFER_SIZE 264
#define SCARD_PROTOCOL_ANY (SCARD_PROTOCOL_T0 | SCARD_PROTOCOL_T1)
#define SCARD_PROTOCOL_T15 0x00000008
#define SCARD_PROTOCOL_UNSET SCARD_PROTOCOL_UNDEFINED


#else
#error TODO not supported platform
#endif

// macOS defines an SCardControl symbol from an old version of pcsclite, and
// gives the current implementation the symbol SCardControl132.
//
// Work around this by making everything look like macOS.
#if !defined(__APPLE__)
LONG SCardControl132(
    SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID pbSendBuffer,
    DWORD cbSendLength, /*@out@*/ LPVOID pbRecvBuffer, DWORD cbRecvLength,
    LPDWORD lpBytesReturned) {
    return SCardControl(hCard, dwControlCode, pbSendBuffer, cbSendLength,
                        pbRecvBuffer, cbRecvLength, lpBytesReturned);
}
#endif
